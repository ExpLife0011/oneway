head	1.10;
access;
symbols;
locks
	yudong:1.10; strict;
comment	@ * @;


1.10
date	2011.02.17.04.30.14;	author yudong;	state Exp;
branches;
next	1.9;

1.9
date	2011.02.16.03.29.29;	author yudong;	state Exp;
branches;
next	1.8;

1.8
date	2011.02.15.04.52.06;	author yudong;	state Exp;
branches;
next	1.7;

1.7
date	2011.02.15.04.32.32;	author yudong;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.15.04.19.37;	author yudong;	state Exp;
branches;
next	1.5;

1.5
date	2011.02.15.03.30.54;	author yudong;	state Exp;
branches;
next	1.4;

1.4
date	2011.02.12.03.30.34;	author yudong;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.11.18.22.00;	author yudong;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.11.18.20.49;	author yudong;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.10.04.52.29;	author yudong;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Ready for production.
@
text
@
/* 
---------------------------------------------------------------
*/

#include <windows.h> 
#include <process.h> 
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>

#include <curl/curl.h>
#include "webfetch2.h"
#include "threads.h"

char *AppTitle="Webfetch v2.0";
char win_text[MAXTEXT] = "Start now ..."; 

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE inst, LPSTR sz, int nCmdShow) { 

 WNDCLASS wc;
 HWND hwnd;
 MSG msg;

 WSADATA wsaData;   

   if (WSAStartup(MAKEWORD(2, 0), &wsaData) != 0) {  
      fprintf(stderr, "WSAStartup() failed");
      exit(1);
   }
   
   mainEvent = CreateEvent(
          NULL,               // default security attributes
          TRUE,               // manual-reset event
          FALSE,              // initial state is nonsignaled
          TEXT("mainEvent")  // object name
          );

   if (mainEvent == NULL) {
        printf("CreateEvent failed (%d)\n", GetLastError());
        return;
   }

   termEvent = CreateEvent( 
          NULL,               // default security attributes
          TRUE,               // manual-reset event
          FALSE,              // initial state is nonsignaled
          TEXT("termEvent")  // object name
          ); 

   if (termEvent == NULL) { 
        printf("CreateEvent failed (%d)\n", GetLastError());
        return;
   }

  wc.style=CS_HREDRAW | CS_VREDRAW;
  wc.lpfnWndProc=WindowProc;
  wc.cbClsExtra=0;
  wc.cbWndExtra=0;
  wc.hInstance=hInst;
  wc.hIcon=LoadIcon(NULL,IDI_WINLOGO);
  wc.hCursor=LoadCursor(NULL,IDC_ARROW);
  wc.hbrBackground=(HBRUSH)COLOR_WINDOWFRAME;
  wc.lpszMenuName=NULL;
  wc.lpszClassName=AppTitle;

  if (!RegisterClass(&wc))
    return 0;

  hwnd = CreateWindow(AppTitle,AppTitle,
    WS_OVERLAPPEDWINDOW,
    CW_USEDEFAULT,CW_USEDEFAULT,300,200,
    NULL,NULL,hInst,NULL);

  if (!hwnd)
    return 0;

  ShowWindow(hwnd,nCmdShow);
  UpdateWindow(hwnd);

  // now launch main thread 
  mid = _beginthread(main_proc, 0, NULL);

  while(GetMessage(&msg,NULL,0,0) > 0){
     TranslateMessage(&msg);
     DispatchMessage(&msg);
  }  // main win does nothing

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
  static int counter; 
  char win_text[100]; 
  int Id;
  Id = 12;
  switch (msg)
  {
    case WM_CREATE:
      // set off time every 2 sec
      SetTimer(hwnd, Id, 2000, NULL);
      break;
    case WM_TIMER:
      InvalidateRect(hwnd, NULL, TRUE);
      break;
    case WM_PAINT:
    {
      PAINTSTRUCT ps;
      HDC dc;
      RECT r;
      GetClientRect(hwnd,&r);
      dc=BeginPaint(hwnd,&ps);
      sprintf(win_text, "Now running at %d", (counter++)%2000); 
      DrawText(dc,win_text,-1,&r,DT_SINGLELINE|DT_CENTER|DT_VCENTER);
      EndPaint(hwnd,&ps);
      break;
    }

    case WM_DESTROY:
      KillTimer(hwnd, Id); 
      SetEvent(mainEvent);
      WaitForSingleObject(mid, INFINITE); 
      printf("Process terminated\n");
      fflush(stdout); 
      PostQuitMessage(0);
      break;

    default:
      return DefWindowProc(hwnd, msg, wparam, lparam);
  }
  return 0;
} 


void main_proc( LPVOID lpParam) { 

 HANDLE tid[MAXTHREADS]; 
 int i, iparm[MAXLINES]; 
 int j, ti, Nthreads, waitcnt; 
 DWORD exitCode, mainEventResult; 
 

 for(;;) { 
    // get config file 
    printf("now getting config file\n"); fflush(stdout); 
    get_config(); 
    printf("config file got\n"); fflush(stdout); 

    ti=0;    // keep track of thread handles 
    for (i=0; i<Nconfig; i++) { 
   
     iparm[i] = i; 
     if (strcasecmp(proto[i], "http") == 0 ) { 
        printf("index=%d: HTTP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(http_proc, 0, iparm+i);      
         
     } else if (strcasecmp(proto[i], "tcp") == 0 ) { 
        printf("index=%d: TCP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(tcp_proc, 0, iparm+i);      

     } else if (strcasecmp(proto[i], "udp") == 0 ) {
        printf("index=%d: UDP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(udp_proc, 0, iparm+i);      

     } else if (strcasecmp(proto[i], "dns") == 0 ) {
        printf("index=%d: DNS\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(dns_proc, 0, iparm+i);      

     } else { 
        printf("index=%d: Undefined protocol\n", i); 

     }

    }  // end for 

    Nthreads = ti;
    printf("----------- %d threads launched---------------\n", Nthreads); 
    fflush(stdout); 

    waitcnt = 0; 
    while (waitcnt++ < RELOAD_PERIOD ) {  
      mainEventResult = WaitForSingleObject(mainEvent, 1000);
      switch(mainEventResult) {
         case WAIT_OBJECT_0:
           printf("Main thread exiting ...\n"); 
           fflush(stdout);
           printf("Now telling the threads to quit ...\n");
           fflush(stdout);
           SetEvent(termEvent);
           WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, 5000); 
           _endthread();
           break;
         default:
           //printf("Main thread continues ...\n"); 
           fflush(stdout);
           break;
       } // end switch
    }  // end of while
     
    // time to reload config 
    printf("Now telling the threads to quit ...\n"); 
    fflush(stdout); 
    SetEvent(termEvent);   

    for (ti=0; ti<Nthreads; ti++) printf("handle #: %d = %d \n", ti, tid[ti]); 

    exitCode = WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, 5000); 

    switch ( exitCode ) { 
      // All thread objects were signaled
      case WAIT_OBJECT_0: 
              printf("All threads ended, cleaning up for application exit...\n");
              break;

      default: 
              printf("WaitForMultipleObjects failed (%d)\n", GetLastError());
              break; 
    } 
    fflush(stdout);
    // kill the threads, and restart them at next round  
    for (ti=0; ti<Nthreads; ti++) {
      printf("closing thread id= %d\n", tid[ti]); fflush(stdout); 
     // if ( tid[ti] != NULL )  CloseHandle(tid[ti]); 
    }

   ResetEvent(termEvent); 
 }   // end for(;;). Go back to fetch config, relaunch threads
}
@


1.9
log
@*** empty log message ***
@
text
@d3 1
a3 2
   *  If the command line argument is empty, launch the parent window. Otherwise, 
   *  start the working process as a child process, and let parent babysit it. 
d16 1
a16 1
char *AppTitle="Webfetch2";
@


1.8
log
@Shortened wait time from INFINITE to 5 sec.
@
text
@d147 1
d149 1
a149 1
    fflush(stdout); 
d224 2
a225 1
      if ( tid[ti] != NULL )  CloseHandle(tid[ti]); 
@


1.7
log
@turned off debug messages.
@
text
@d191 1
a191 1
           WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, INFINITE); 
d208 1
a208 1
    exitCode = WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, INFINITE); 
@


1.6
log
@Single process, with main thread and sub threads.
@
text
@d195 1
a195 1
           printf("Main thread continues ...\n"); 
@


1.5
log
@Two-process approach.
@
text
@a18 1
PROCESS_INFORMATION pi;
a24 1
 STARTUPINFO si;
a25 4
 HANDLE tid[MAXTHREADS]; 
 int i, iparm[MAXLINES]; 
 int j, ti, Nthreads, counter;
 DWORD exitCode; 
a27 2
 if (strlen(sz) != 0 ) {  //this is child process. launch working code 

d33 12
d49 1
a49 1
          TEXT("termeEvent")  // object name
a56 71
   for(;;) { 
    // get config file 
    get_config(); 
    fflush(stdout); 

    ti=0;    // keep track of thread handles 
    for (i=0; i<Nconfig; i++) { 
   
     iparm[i] = i; 
     if (strcasecmp(proto[i], "http") == 0 ) { 
        printf("index=%d: HTTP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(http_proc, 0, iparm+i);      
         
     } else if (strcasecmp(proto[i], "tcp") == 0 ) { 
        printf("index=%d: TCP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(tcp_proc, 0, iparm+i);      

     } else if (strcasecmp(proto[i], "udp") == 0 ) {
        printf("index=%d: UDP\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(udp_proc, 0, iparm+i);      

     } else if (strcasecmp(proto[i], "dns") == 0 ) {
        printf("index=%d: DNS\n", i); 
        for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(dns_proc, 0, iparm+i);      

     } else { 
        printf("index=%d: Undefined protocol\n", i); 

     }

    }  // end for 

    Nthreads = ti;
    printf("----------- %d threads launched---------------\n", Nthreads); 
    fflush(stdout); 

    Sleep(15000);    

    printf("Now telling the threads to quit ...\n"); 
    fflush(stdout); 
    SetEvent(termEvent);   

    for (ti=0; ti<Nthreads; ti++) printf("handle #: %d = %d \n", ti, tid[ti]); 

    exitCode = WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, INFINITE); 

    switch ( exitCode ) { 
      // All thread objects were signaled
      case WAIT_OBJECT_0: 
              printf("All threads ended, cleaning up for application exit...\n");
              break;

      default: 
              printf("WaitForMultipleObjects failed (%d)\n", GetLastError());
              break; 
    } 
    fflush(stdout);
    // kill the threads, and restart them at next round  
    for (ti=0; ti<Nthreads; ti++) {
      if ( tid[ti] != NULL )  CloseHandle(tid[ti]); 
    }

   ResetEvent(termEvent); 
  }   // end for(;;). Go back to fetch config, relaunch threads

 } else {   // the parent window

  ZeroMemory( &si, sizeof(si) );
  si.cb = sizeof(si);
  ZeroMemory( &pi, sizeof(pi) );

d82 2
a83 18
  // now start child process and babysit it
  counter = 0; 
  for(;;) {  // keep process running  
    // Start the child process. 
    if( !CreateProcess( NULL,   // No module name (use command line)
        "webfetch2.exe 1",        // with command line args, child proc
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi )           // Pointer to PROCESS_INFORMATION structure
    ) {
        printf( "CreateProcess failed (%d).\n", GetLastError() );
        return;
    }
d85 4
a88 20
    printf("Process launched \n"); 
    exitCode = WAIT_TIMEOUT; 
    while (exitCode == WAIT_TIMEOUT) {   // keep waiting 
      if (PeekMessage(&msg,NULL,0,0,1) > 0) { 
       TranslateMessage(&msg);
       DispatchMessage(&msg);
      }
      sprintf(win_text, "Running at %d", (counter++)%2000); 
      // Wait until child process exits.
      exitCode = WaitForSingleObject( pi.hProcess, 500);  
    }  // end while

    printf("Process exited. Relaunch ... \n"); 
    // Close process and thread handles. 
    CloseHandle( pi.hProcess );
    CloseHandle( pi.hThread );

  }  // end for(;;) 

 } // end  if (strlen(sz) != 0 ) 
d95 2
d115 1
d123 2
a124 3
      SetEvent(termEvent);
      printf("Terminating process ...\n");
      TerminateProcess(pi.hProcess,0); 
d137 92
@


1.4
log
@*** empty log message ***
@
text
@d19 1
a26 1
 PROCESS_INFORMATION pi;
d219 5
@


1.3
log
@*** empty log message ***
@
text
@d18 1
d30 1
a30 1
 int j, ti, Nthreads;
d150 1
d175 1
d194 2
d198 7
d212 1
a212 1
      DrawText(dc,"Program running",-1,&r,DT_SINGLELINE|DT_CENTER|DT_VCENTER);
d218 1
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
/*  $Id$
@


1.1
log
@Initial revision
@
text
@d2 5
d17 9
a25 2
int main(void)
{
d33 18
a50 41
 if (WSAStartup(MAKEWORD(2, 0), &wsaData) != 0) {  
    fprintf(stderr, "WSAStartup() failed");
    exit(1);
 }
 
 termEvent = CreateEvent( 
        NULL,               // default security attributes
        TRUE,               // manual-reset event
        FALSE,              // initial state is nonsignaled
        TEXT("termeEvent")  // object name
        ); 

 if (termEvent == NULL) { 
      printf("CreateEvent failed (%d)\n", GetLastError());
      return;
 }

 for(;;) { 
  // get config file 
  get_config(); 
  fflush(stdout); 

  ti=0;    // keep track of thread handles 
  for (i=0; i<Nconfig; i++) { 
 
   iparm[i] = i; 
   if (strcasecmp(proto[i], "http") == 0 ) { 
      printf("index=%d: HTTP\n", i); 
      for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(http_proc, 0, iparm+i);      
       
   } else if (strcasecmp(proto[i], "tcp") == 0 ) { 
      printf("index=%d: TCP\n", i); 
      for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(tcp_proc, 0, iparm+i);      

   } else if (strcasecmp(proto[i], "udp") == 0 ) {
      printf("index=%d: UDP\n", i); 
      for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(udp_proc, 0, iparm+i);      

   } else if (strcasecmp(proto[i], "dns") == 0 ) {
      printf("index=%d: DNS\n", i); 
      for (j=0; j<intensity[i]; j++) tid[ti++] = _beginthread(dns_proc, 0, iparm+i);      
d52 129
a180 2
   } else { 
      printf("index=%d: Undefined protocol\n", i); 
d182 1
a182 1
   }
d184 1
a184 1
  }  // end for 
d186 2
a187 29
  Nthreads = ti;
  printf("----------- %d threads launched---------------\n", Nthreads); 
  fflush(stdout); 

  Sleep(15000);    

  printf("Now telling the threads to quit ...\n"); 
  fflush(stdout); 
  SetEvent(termEvent);   

  for (ti=0; ti<Nthreads; ti++) printf("handle #: %d = %d \n", ti, tid[ti]); 

  exitCode = WaitForMultipleObjects((DWORD)Nthreads, tid, TRUE, INFINITE); 

  switch ( exitCode ) { 
    // All thread objects were signaled
    case WAIT_OBJECT_0: 
            printf("All threads ended, cleaning up for application exit...\n");
            break;

    default: 
            printf("WaitForMultipleObjects failed (%d)\n", GetLastError());
            break; 
  } 
  fflush(stdout);
  // kill the threads, and restart them at next round  
  for (ti=0; ti<Nthreads; ti++) {
    if ( tid[ti] != NULL )  CloseHandle(tid[ti]); 
  }
d189 19
a207 2
 ResetEvent(termEvent); 
 }   // end for(;;). Go back to fetch config, relaunch threads
d209 3
d213 2
a214 1
}
@
