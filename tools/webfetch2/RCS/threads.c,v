head	1.13;
access;
symbols;
locks
	yudong:1.13; strict;
comment	@ * @;


1.13
date	2011.02.17.04.30.47;	author yudong;	state Exp;
branches;
next	1.12;

1.12
date	2011.02.15.04.32.12;	author yudong;	state Exp;
branches;
next	1.11;

1.11
date	2011.02.11.03.57.02;	author yudong;	state Exp;
branches;
next	1.10;

1.10
date	2011.02.11.03.47.08;	author yudong;	state Exp;
branches;
next	1.9;

1.9
date	2011.02.10.04.52.07;	author yudong;	state Exp;
branches;
next	1.8;

1.8
date	2011.02.10.03.55.33;	author yudong;	state Exp;
branches;
next	1.7;

1.7
date	2011.02.10.03.43.54;	author yudong;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.09.04.50.30;	author yudong;	state Exp;
branches;
next	1.5;

1.5
date	2011.02.09.04.43.02;	author yudong;	state Exp;
branches;
next	1.4;

1.4
date	2011.02.08.04.27.57;	author yudong;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.07.03.11.35;	author yudong;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.07.00.15.09;	author yudong;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.06.21.38.46;	author yudong;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Ready for production.
@
text
@#include <windows.h>
#include <winsock.h>
#include <process.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <time.h>

#include <curl/curl.h>
#include "webfetch2.h"
#include "threads.h"

void tcp_proc( LPVOID lpParam ) {  
   int *i; 
   char dbuff[2048]; 
   DWORD termEventResult; 
   struct sockaddr_in server; 
   int sock; 

   i = (int)lpParam; 

   memset(&server, 0, sizeof(server)); 
   server.sin_family      = AF_INET;             /* Internet address family */
   server.sin_addr.s_addr = inet_addr(ipstr[*i]);   /* Server IP address */
   server.sin_port        = htons(port[*i]); /* Server port */


   for (;;) { 
     //printf("TCP thread %d\n", *i); 

     if ((sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
         printf("TCP thread %d: socket open failed\n", *i); 
         _endthread(); 
     }

     if (connect(sock, (struct sockaddr *)&server, sizeof(server) ) < 0 ) {
       printf("TCP thread %d: socket connection failed. Keep trying ...\n", *i); 
     } else { 
       printf("TCP thread %d: socket connected. Receiving data ...\n", *i); 
       recv(sock, dbuff, 2047, 0); 
     }
     
     termEventResult = WaitForSingleObject(termEvent, 2000); 
     switch(termEventResult) { 
       case WAIT_OBJECT_0:
         printf("TCP thread %d exiting ...\n", *i); 
         fflush(stdout);
         closesocket(sock); 
         _endthread(); 
         break; 
       default: 
         //printf("TCP thread %d continue ...\n", *i); 
         closesocket(sock); 
         fflush(stdout);
         break; 
     } // end switch 

   } // end for(;;)
}

void udp_proc( LPVOID lpParam ) { 
   int *i;
   char dbuff[1024];
   int dsize, j; 
   DWORD termEventResult;
   struct sockaddr_in server;
   int sock;
   
   i = (int)lpParam;
   srand( GetCurrentThreadId() );
   //srand( (unsigned)time( NULL ) );

   memset(&server, 0, sizeof(server));
   server.sin_family      = AF_INET;             /* Internet address family */
   server.sin_addr.s_addr = inet_addr(ipstr[*i]);   /* Server IP address */
   server.sin_port        = htons(port[*i]); /* Server port */

   if ((sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
       printf("UDP thread %d: socket open failed\n", *i);
       _endthread();
   }

   for (;;) {
     //printf("UDP thread %d\n", *i);

     // create random data
     dsize = rand()%1024+10; 
     for (j=0; j<dsize; j++) dbuff[j] = rand()%256; 

     if (sendto(sock, dbuff, dsize, 0, (struct sockaddr *)&server, sizeof(server) ) < 0 ) {
       printf("UDP thread %d: sendto failed. Keep trying ...\n", *i);
     } else {
       //printf("UDP thread %d: data sent. short break ...\n", *i);
     }

     termEventResult = WaitForSingleObject(termEvent, 500);
     switch(termEventResult) {
       case WAIT_OBJECT_0:
         printf("UDP thread %d exiting ...\n", *i);
         fflush(stdout);
         closesocket(sock);
         _endthread();
         break;
       default:
         //printf("UDP thread %d continue ...\n", *i);
         fflush(stdout);
         break;
     } // end switch

   } // end for(;;)
}

static size_t mycb(void *ptr, size_t size, size_t nmemb, void *data) {
 return size*nmemb; 
}

void http_proc( LPVOID lpParam ) { 
  char url[MAXTEXT]; 
  CURL *curl;
  CURLcode res;
   int *i;
   DWORD termEventResult;

   i = (int)lpParam;
   snprintf(url, MAXTEXT, "http://%s", ipstr[*i]); 
   printf("HTTP thread %d, url=%s\n", *i, url);
     curl = curl_easy_init();
     curl_easy_setopt(curl, CURLOPT_URL, url); 
     curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, mycb); 
     curl_easy_setopt(curl, CURLOPT_USERAGENT, "Mozilla-agent/1.0");

   for (;;) {
     res = curl_easy_perform(curl);
     if (res==0) {
       //printf("HTTP thread fetching ok\n"); 
     } else { 
       //printf("HTTP thread fetching error: %d\n", res); 
     }
     fflush(stdout); 
     // check if told to quit
     termEventResult = WaitForSingleObject(termEvent, 2000);
     switch(termEventResult) {
       case WAIT_OBJECT_0:
         printf("HTTP thread %d exiting ...\n", *i);
         fflush(stdout);
         curl_easy_cleanup(curl);
         _endthread();
         break;
       default:
        //printf("HTT thread %d continue ...\n", *i);
         fflush(stdout);
         break;
     } // end switch

   } // end for(;;)
}

// largely copied from 
// http://www.binarytides.com/blog/dns-query-code-in-c-with-winsock-and-linux-sockets/

void ChangetoDnsNameFormat(unsigned char* dns,unsigned char* host) {
int lock=0 , i;
 
strcat((char*)host,".");
 
for(i=0;i<(int)strlen((char*)host);i++)
{
if(host[i]=='.')
{
*dns++=i-lock;
for(;lock<i;lock++)
{
*dns++=host[lock];
}
lock++; //or lock=i+1;
}
}
*dns++='\0';
}


void dns_proc( LPVOID lpParam ) { 
   int *i;
   char buf[4096], host[1024], dnsip[MAXTEXT], domain[MAXTEXT];
   char *ctmp, *qname; 
   int dsize, j;
   DWORD termEventResult;
   struct sockaddr_in server;
   int sock;
   struct DNS_HEADER *dns = NULL;
   struct QUESTION *qinfo = NULL;

   i = (int)lpParam;
   srand( GetCurrentThreadId() );
   //srand( (unsigned)time( NULL ) );

   //Set the DNS structure to standard queries
   dns = (struct DNS_HEADER *)&buf;
 
   dns->qr = 0; //This is a query
   dns->opcode = 0; //This is a standard query
   dns->aa = 0; //Not Authoritative
   dns->tc = 0; //This message is not truncated
   dns->rd = 1; //Recursion Desired
   dns->ra = 0; //Recursion not available! hey we dont have it (lol)
   dns->z = 0;
   dns->ad = 0;
   dns->cd = 0;
   dns->rcode = 0;
   dns->q_count = htons(1); //we have only 1 question
   dns->ans_count = 0;
   dns->auth_count = 0;
   dns->add_count = 0;
 
   //point to the query portion
   qname =(unsigned char*)&buf[sizeof(struct DNS_HEADER)];

   //ipstr has this format: edoors.com/72.52.66.12
   ctmp = ipstr[*i]; 
   memset(domain, 0, MAXTEXT);
   strncpy(domain, ctmp, strstr(ctmp, "/") - ctmp); 
   ctmp = strstr(ctmp, "/") + 1; 
   memset(dnsip, 0, MAXTEXT);
   strncpy(dnsip, ctmp, strlen(ctmp)); 

   memset(&server, 0, sizeof(server));
   server.sin_family      = AF_INET;             /* Internet address family */
   server.sin_addr.s_addr = inet_addr(dnsip);   /* Server IP address */
   server.sin_port        = htons(53);          /* Server port */

   if ((sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
       printf("DNS thread %d: socket open failed\n", *i);
       _endthread();
   }

   for (;;) {
     //printf("DNS thread %d\n", *i);

     // create random host data
     memset(host, 0, 1024);
     dsize = rand()%32+1;   // max host name length  
     for (j=0; j<dsize; j++) host[j] = rand()%26+97;
     host[dsize] = '.'; 
     strcat(host, domain); 
     //printf("Resolving host: %s\n", host); 

     dns->id = (unsigned short) rand(); 
     ChangetoDnsNameFormat(qname,host);
     qinfo =(struct QUESTION*)&buf[sizeof(struct DNS_HEADER) + 
                   (strlen((const char*)qname) + 1)]; //fill it
 
     qinfo->qtype = htons(1); //we are requesting the ipv4 address
     qinfo->qclass = htons(1); //its internet (lol)

     if (sendto(sock, buf, 
                sizeof(struct DNS_HEADER) + (strlen((const char*)qname)+1) 
                + sizeof(struct QUESTION), 
                0, (struct sockaddr *)&server, sizeof(server) ) < 0 ) {
       printf("DNS thread %d: sendto failed. Keep trying ...\n", *i);
     } else {
      //printf("DNS thread %d: data sent. short break ...\n", *i);
     }

     termEventResult = WaitForSingleObject(termEvent, 5000);
     switch(termEventResult) {
       case WAIT_OBJECT_0:
         printf("DNS thread %d exiting ...\n", *i);
         fflush(stdout);
         closesocket(sock);
         _endthread();
         break;
       default:
        // printf("DNS thread %d continue ...\n", *i);
         fflush(stdout);
         break;
     } // end switch

   } // end for(;;)
}
@


1.12
log
@Turned off debug messages.
@
text
@d137 1
a137 1
       printf("HTTP thread fetching error: %d\n", res); 
@


1.11
log
@*** empty log message ***
@
text
@d29 1
a29 1
     printf("TCP thread %d\n", *i); 
d52 1
a52 1
         printf("TCP thread %d continue ...\n", *i); 
d84 1
a84 1
     printf("UDP thread %d\n", *i);
d87 1
a87 1
     dsize = rand()%1024; 
d93 1
a93 1
       printf("UDP thread %d: data sent. short break ...\n", *i);
d105 1
a105 1
         printf("UDP thread %d continue ...\n", *i);
d135 1
a135 1
       printf("HTTP thread fetching ok\n"); 
d150 1
a150 1
         printf("HTT thread %d continue ...\n", *i);
d237 1
a237 1
     printf("DNS thread %d\n", *i);
d241 1
a241 1
     dsize = rand()%32;   // max host name length  
d245 1
a245 1
     printf("Resolving host: %s\n", host); 
d261 1
a261 1
       printf("DNS thread %d: data sent. short break ...\n", *i);
d273 1
a273 1
         printf("DNS thread %d continue ...\n", *i);
@


1.10
log
@*** empty log message ***
@
text
@d70 2
a71 1
   srand( (unsigned)time( NULL ) );
d193 3
a195 2
   i = (int *)&lpParam;
   srand( (unsigned)time( NULL ) );
d241 1
a241 1
     dsize = rand()%64; 
d264 1
a264 1
     termEventResult = WaitForSingleObject(termEvent, 500);
@


1.9
log
@*** empty log message ***
@
text
@d157 24
d183 2
a184 2
   char dbuff[1024], dnsip[MAXTEXT], domain[MAXTEXT];
   char *ctmp; 
d189 2
d192 1
a192 1
   i = (int)lpParam;
d195 21
d238 1
d240 18
a257 4
     for (j=0; j<dsize; j++) dbuff[j] = rand()%26+97;

     if (sendto(sock, dbuff, dsize, 0, (struct sockaddr *)&server, sizeof(server) ) < 0 ) {
       printf("UDP thread %d: sendto failed. Keep trying ...\n", *i);
d259 1
a259 1
       printf("UDP thread %d: data sent. short break ...\n", *i);
d265 1
a265 1
         printf("UDP thread %d exiting ...\n", *i);
d271 1
a271 1
         printf("UDP thread %d continue ...\n", *i);
@


1.8
log
@UDP implemented.
@
text
@d158 27
a184 5
   int *i; 
   i = (int)lpParam; 
   for (;;) { 
     printf("DNS thread %d\n", *i); 
     Sleep(500);
d186 29
@


1.7
log
@*** empty log message ***
@
text
@d7 1
d68 1
a68 1

d70 1
@


1.6
log
@*** empty log message ***
@
text
@d9 1
a9 1
#include "webfetch.h"
d14 1
a14 1
   char dbuff[4096]; 
a15 1
   int iResult;
a36 1
       printf("will keep trying ...\n", *i); 
d39 1
a39 1
       recv(sock, dbuff, 4095, 0); 
d61 47
a107 6
   int *i; 
   i = (int)lpParam; 
   for (;;) { 
     printf("UDP thread %d\n", *i); 
     Sleep(500);
   } 
@


1.5
log
@Added tcp
@
text
@d12 1
a12 1
DWORD WINAPI tcp_proc( LPVOID lpParam ) {  
d62 1
a62 1
DWORD WINAPI udp_proc( LPVOID lpParam ) { 
d75 1
a75 1
DWORD WINAPI http_proc( LPVOID lpParam ) { 
d116 1
a116 1
DWORD WINAPI dns_proc( LPVOID lpParam ) { 
@


1.4
log
@*** empty log message ***
@
text
@d2 1
d14 1
d16 4
d21 7
d29 6
d36 7
a42 1
     printf("TCP thread %d\n", *i); 
d44 1
a44 1
     termEventResult = WaitForSingleObject(termEvent, 500); 
d49 1
d54 1
@


1.3
log
@*** empty log message ***
@
text
@d44 4
d49 38
a86 6
   int *i; 
   i = (int)lpParam; 
   for (;;) { 
     printf("HTTP thread %d\n", *i); 
     Sleep(500);
   }
@


1.2
log
@*** empty log message ***
@
text
@d23 1
d28 1
@


1.1
log
@Initial revision
@
text
@d12 19
a30 3
   int i; 
   i = (int *)lpParam; 
   printf("TCP thread %d\n", i); 
d34 6
a39 3
   int i; 
   i = (int *)lpParam; 
   printf("UDP thread %d\n", i); 
d41 1
d43 6
a48 3
   int i; 
   i = (int *)lpParam; 
   printf("HTTP thread %d\n", i); 
d52 6
a57 3
   int i; 
   i = (int *)lpParam; 
   printf("DNS thread %d\n", i); 
@
