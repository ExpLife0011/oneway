head	1.2;
access;
symbols;
locks
	yudong:1.2; strict;
comment	@ * @;


1.2
date	2002.11.01.04.39.27;	author yudong;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.01.04.23.23;	author yudong;	state Exp;
branches;
next	;


desc
@first version.
@


1.2
log
@PASSED compilation.
@
text
@/*
 *  $Id: mytestudp.c,v 1.1 2002/11/01 04:23:23 yudong Exp yudong $
 *
 *  libnet 1.1
 *  Build a UDP packet
 *
 */

#include <libnet.h>

int main(int argc, char *argv[])
{
    int c, i, build_ip;
    u_char *cp;
    libnet_t *l;
    libnet_ptag_t ip;
    libnet_ptag_t udp;
    libnet_ptag_t dns;
    char *payload;
    u_short payload_s;
    struct libnet_stats ls;
    u_long src_ip, dst_ip;
    u_short src_prt, dst_prt;
    u_char opt[20];
    char errbuf[LIBNET_ERRBUF_SIZE];

    char *destIP = "192.168.1.100";
    char *qryDM = "www.nasa.gov"; 
    char *testpayload = "\x03\x77\x77\x77\x06\x79\x61\x68\x6f\x6f\x6f\x03"
        "\x63\x6f\x6d\x00\x00\xff\x00\x01";  /* www.yahooo.com */
    
    printf("Querying %s for domain %s ...\n", destIP, qryDM); 

    /*
     *  Initialize the library.  Root priviledges are required.
     */
    l = libnet_init(
            LIBNET_RAW4,                            /* injection type */
            NULL,                                   /* network interface */
            errbuf);                                /* errbuf */

    if (l == NULL)
    {
        fprintf(stderr, "libnet_init() failed: %s\n", errbuf);
        exit(EXIT_FAILURE);
    }

    libnet_seed_prand(l);

    src_ip = libnet_get_prand(LIBNET_PRu32);     /* Random src ip */     
    src_prt = libnet_get_prand(LIBNET_PRu16);	 /* Random source port */
    dst_prt = 53;			         /* DNS */		 
    payload = testpayload; 
    payload_s = strlen(payload);
    udp = 0;

    if ((dst_ip = libnet_name2addr4(l, destIP, LIBNET_RESOLVE)) == -1)
                {
                    fprintf(stderr, "Bad destination IP address: %s\n", destIP);
                    exit(EXIT_FAILURE);
                }

/* Building DNS query */
  dns = libnet_build_dnsv4(
    libnet_get_prand(LIBNET_PRu16),         /* ID */
    0x0100,            /* flags: recursive query */
    0x0001,            /* number of questions */
    0x0000,            /* number of answer resource records */
    0x0000,            /* number of authority resource records */
    0x0000,            /* number of additional resource records */
    payload,           /* pointer to packet data (or NULL) */
    payload_s,             /* payload length */
    l,         /* libnet context pointer */
    dns       /* packet id */
    );

        if (dns == -1)
        {
            fprintf(stderr, "Can't build DNS header: %s\n", libnet_geterror(l));
            goto bad;
        }


/* Building UDP */
        udp = libnet_build_udp(
            src_prt,                                /* source port */
            dst_prt + i,                            /* destination port */
            LIBNET_UDP_H + payload_s + LIBNET_DNSV4_H,   /* packet length */
            0,                                      /* checksum */
            NULL,                                /* payload */
            0,                              /* payload size */
            l,                                      /* libnet handle */
            udp);                                   /* libnet id */
        if (udp == -1)
        {
            fprintf(stderr, "Can't build UDP header: %s\n", libnet_geterror(l));
            goto bad;
        }

/* Building IP */

            ip = libnet_build_ipv4(
                LIBNET_IPV4_H + payload_s + LIBNET_UDP_H + LIBNET_DNSV4_H, /* length */
                0x10,                                          /* TOS:DNS */
                libnet_get_prand(LIBNET_PRu16),             /* IP ID */
                0,                                          /* IP Frag */
                64,                                         /* TTL */
                IPPROTO_UDP,                                /* protocol */
                0,                                          /* checksum */
                src_ip,
                dst_ip,
                NULL,                                       /* payload */
                0,                                          /* payload size */
                l,                                          /* libnet handle */
                0);                                         /* libnet id */
            if (ip == -1)
            {
             fprintf(stderr, "Can't build IP header: %s\n", libnet_geterror(l));
             goto bad;
            }

/*  Write it to the wire. */
        c = libnet_write(l);
        if (c == -1) {
            fprintf(stderr, "Write error: %s\n", libnet_geterror(l));
            goto bad;
        } else {
            printf("Wrote %d byte UDP packet; check the wire.\n", c);
        }

    libnet_stats(l, &ls);
    fprintf(stderr, "Packets sent:  %ld\n"
                    "Packet errors: %ld\n"
                    "Bytes written: %ld\n",
                    ls.packets_sent, ls.packet_errors, ls.bytes_written);
    libnet_destroy(l);

    return (EXIT_SUCCESS);
bad:
    libnet_destroy(l);
    return (EXIT_FAILURE);
}

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 *  $Id: udp1.c,v 1.1.1.1 2002/08/05 22:26:04 route Exp $
d71 2
a72 2
    u_char *,           /* pointer to packet data (or NULL) */
    u_long,             /* payload length */
d88 1
a88 1
            LIBNET_UDP_H + payload_s,               /* packet length */
d90 2
a91 2
            payload,                                /* payload */
            payload_s,                              /* payload size */
d103 2
a104 2
                LIBNET_IPV4_H + 20 + payload_s + LIBNET_UDP_H, /* length */
                0,                                          /* TOS */
@
